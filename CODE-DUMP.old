//Takes current maze, name + coordinates of room to add and 2D array
//with refs to all rooms it links to as well as
//type (i.e. start(0), end(2) or normal(1))
// t_room	*new_maze(t_str room, unsigned int type, t_log *data, t_str *cur_links)
// {
// 	t_room	*maze;
// 	t_room	**temp1;
// 	t_room	*temp2;
// 	int		i;
// 	int		j;
// 	int		k;
// 	char	**link_name;

// 	k = 0;
// 	j = 0; //mm
// printf("starting 1\n");
// 	maze = malloc(sizeof(t_room));
// 	temp1 = &maze;
// printf("room : %s\n type : %d\n cur_links : %s\ncur_links : %s\n", room, type, cur_links[0], cur_links[1]);
// 	(*temp1)->room_type = (unsigned int)malloc(sizeof(unsigned int)*200);
// 	(*temp1)->room_type = type;
// printf("does it do this though?\n");
// 	(*temp1)->name = get_room_name(room);
// printf("temp1->name = %s\n", (*temp1)->name);
// 	(*temp1)->x = get_coordinate(room, 'x');
// 	(*temp1)->y = get_coordinate(room, 'y');
// 	(*temp1)->visited = 0;
// printf("temp1->x = %d\ntemp1->y = %d\n", (*temp1)->x, (*temp1)->y);
// 	(*temp1)->next = NULL;
// 	while (cur_links[k])
// 	{
// printf("starting 2\n");
// 		temp2 = (t_room*)malloc(sizeof(t_room));
// 		i = 0;
// 		link_name = ft_strsplit(cur_links[j], '-');
// printf("link_name: %s\n", link_name[0]);
// printf("link_name: %s\n", link_name[1]);
// 		while (data->rooms[i])
// 		{
// 			if (ft_strequ(link_name[1], get_room_name(data->rooms[i])))
// 			{
// printf("GRN: %s\n", get_room_name(data->rooms[i]));
// 				break;
// 			}
// 			i++;
// 		}
// 		if (i == data->start_index)
// 			temp2->room_type = 0;
// 		else if (i == data->end_index)
// 			temp2->room_type = 1;
// 		else
// 			temp2->room_type = 2;
// 		temp2->name = ft_strdup(link_name[1]);
// 		temp2->x = get_coordinate(data->rooms[i], 'x');
// 		temp2->y = get_coordinate(data->rooms[i], 'y');
// 		temp2->visited = 0;
// 		temp2->room_links[k] = NULL;
// printf("t->name: %s\nt->x: %d, t->y: %d\n", temp2->name, temp2->x, temp2->y);
// 		(*temp1)->room_links[j] = temp2;
// printf("that worked\n");
// 		j++;
// 		k++;
// 	}
// 	return (*temp1);
// }